//===--------------------------------
// Define common Enums
//===--------------------------------
#ifndef ASTL_DIALECT_ENUMS_TD
#define ASTL_DIALECT_ENUMS_TD
include "mlir/IR/EnumAttr.td"

def Ax_Status : I32EnumAttr<"Status",
  "status code for func return status",[
    I32EnumAttrCase<"Success", 0>,
    I32EnumAttrCase<"Error", 1>,
    I32EnumAttrCase<"InvalidArgs", 2>
  ]>{
  let genSpecializedAttr = 0;
  let cppNamespace = "::astl";
}
def Ax_OpType : I32EnumAttr<"OpType",
  "type of the operation",[
    I32EnumAttrCase<"Abs", 0>,
    I32EnumAttrCase<"Acos", 1>,
    I32EnumAttrCase<"Acosh", 2>,
    I32EnumAttrCase<"Add", 3>,
    I32EnumAttrCase<"And", 4>,
    I32EnumAttrCase<"ArgMax", 5>,
    I32EnumAttrCase<"ArgMin", 6>,
    I32EnumAttrCase<"Asin", 7>,
    I32EnumAttrCase<"Asinh", 8>,
    I32EnumAttrCase<"Atan", 9>,
    I32EnumAttrCase<"Atanh", 10>,
    I32EnumAttrCase<"AveragePool", 11>,
    I32EnumAttrCase<"BatchNormalization", 12>,
    I32EnumAttrCase<"Cast", 13>,
    I32EnumAttrCase<"Ceil", 14>,
    I32EnumAttrCase<"Clip", 15>,
    I32EnumAttrCase<"Concat", 16>,
    I32EnumAttrCase<"Constant", 17>,
    I32EnumAttrCase<"Conv", 18>,
    I32EnumAttrCase<"ConvTranspose", 19>,
    I32EnumAttrCase<"Cos", 20>,
    I32EnumAttrCase<"Cosh", 21>,
    I32EnumAttrCase<"DepthToSpace", 22>,
    I32EnumAttrCase<"Div", 23>,
    I32EnumAttrCase<"Dropout", 24>,
    I32EnumAttrCase<"Elu", 25>,
    I32EnumAttrCase<"Equal", 26>,
    I32EnumAttrCase<"Erf", 27>,
    I32EnumAttrCase<"Exp", 28>,
    I32EnumAttrCase<"Flatten", 29>,
    I32EnumAttrCase<"Floor", 30>,
    I32EnumAttrCase<"GRU", 31>,
    I32EnumAttrCase<"Gather", 32>,
    I32EnumAttrCase<"Gemm", 33>,
    I32EnumAttrCase<"GlobalAveragePool", 34>,
    I32EnumAttrCase<"GlobalLpPool", 35>,
    I32EnumAttrCase<"GlobalMaxPool", 36>,
    I32EnumAttrCase<"Greater", 37>,
    I32EnumAttrCase<"HardSigmoid", 38>,
    I32EnumAttrCase<"Identity", 39>,
    I32EnumAttrCase<"If", 40>,
    I32EnumAttrCase<"InstanceNormalization", 41>,
    I32EnumAttrCase<"LRN", 42>,
    I32EnumAttrCase<"LSTM", 43>,
    I32EnumAttrCase<"LeakyRelu", 44>,
    I32EnumAttrCase<"Less", 45>,
    I32EnumAttrCase<"Log", 46>,
    I32EnumAttrCase<"LogSoftmax", 47>,
    I32EnumAttrCase<"Loop", 48>,
    I32EnumAttrCase<"MatMul", 49>,
    I32EnumAttrCase<"Max", 50>,
    I32EnumAttrCase<"MaxPool", 51>,
    I32EnumAttrCase<"MaxRoiPool", 52>,
    I32EnumAttrCase<"Mean", 53>,
    I32EnumAttrCase<"Min", 54>,
    I32EnumAttrCase<"Mul", 55>,
    I32EnumAttrCase<"Multinomial", 56>,
    I32EnumAttrCase<"Neg", 57>,
    I32EnumAttrCase<"Not", 58>,
    I32EnumAttrCase<"Or", 59>,
    I32EnumAttrCase<"PRelu", 60>,
    I32EnumAttrCase<"Pad", 61>,
    I32EnumAttrCase<"Pow", 62>,
    I32EnumAttrCase<"QLinearConv", 63>,
    I32EnumAttrCase<"QuantizeLinear", 64>,
    I32EnumAttrCase<"RNN", 65>,
    I32EnumAttrCase<"RandomNormal", 66>,
    I32EnumAttrCase<"RandomNormalLike", 67>,
    I32EnumAttrCase<"RandomUniform", 68>,
    I32EnumAttrCase<"RandomUniformLike", 69>,
    I32EnumAttrCase<"Reciprocal", 70>,
    I32EnumAttrCase<"ReduceL1", 71>,
    I32EnumAttrCase<"ReduceL2", 72>,
    I32EnumAttrCase<"ReduceLogSum", 73>,
    I32EnumAttrCase<"ReduceLogSumExp", 74>,
    I32EnumAttrCase<"ReduceMax", 75>,
    I32EnumAttrCase<"ReduceMean", 76>,
    I32EnumAttrCase<"ReduceMin", 77>,
    I32EnumAttrCase<"ReduceProd", 78>,
    I32EnumAttrCase<"ReduceSum", 79>,
    I32EnumAttrCase<"ReduceSumSquare", 80>,
    I32EnumAttrCase<"Relu", 81>,
    I32EnumAttrCase<"Reshape", 82>,
    I32EnumAttrCase<"Resize", 83>,
    I32EnumAttrCase<"ReverseSequence", 84>,
    I32EnumAttrCase<"RoiAlign", 85>,
    I32EnumAttrCase<"Round", 86>,
    I32EnumAttrCase<"SVMClassifier", 87>,
    I32EnumAttrCase<"SVMRegressor", 88>,
    I32EnumAttrCase<"Scatter", 89>,
    I32EnumAttrCase<"ScatterElements", 90>,
    I32EnumAttrCase<"ScatterND", 91>,
    I32EnumAttrCase<"Selu", 92>,
    I32EnumAttrCase<"Shape", 93>,
    I32EnumAttrCase<"Shrink", 94>,
    I32EnumAttrCase<"Sigmoid", 95>,
    I32EnumAttrCase<"Sign", 96>,
    I32EnumAttrCase<"Sin", 97>,
    I32EnumAttrCase<"Sinh", 98>,
    I32EnumAttrCase<"Size", 99>,
    I32EnumAttrCase<"Slice", 100>,
    I32EnumAttrCase<"Softmax", 101>,
    I32EnumAttrCase<"Softplus", 102>,
    I32EnumAttrCase<"Softsign", 103>,
    I32EnumAttrCase<"SpaceToDepth", 104>,
    I32EnumAttrCase<"Split", 105>,
    I32EnumAttrCase<"Sqrt", 106>,
    I32EnumAttrCase<"Squeeze", 107>,
    I32EnumAttrCase<"StringNormalizer", 108>,
    I32EnumAttrCase<"Sub", 109>,
    I32EnumAttrCase<"Sum", 110>,
    I32EnumAttrCase<"Tan", 111>,
    I32EnumAttrCase<"Tanh", 112>,
    I32EnumAttrCase<"TfIdfVectorizer", 113>,
    I32EnumAttrCase<"ThresholdedRelu", 114>,
    I32EnumAttrCase<"Tile", 115>,
    I32EnumAttrCase<"TopK", 116>,
    I32EnumAttrCase<"Transpose", 117>,
    I32EnumAttrCase<"TreeEnsembleClassifier", 118>,
    I32EnumAttrCase<"TreeEnsembleRegressor", 119>,
    I32EnumAttrCase<"Unsqueeze", 120>,
    I32EnumAttrCase<"Upsample", 121>,
    I32EnumAttrCase<"Where", 122>,
    I32EnumAttrCase<"Xor", 123>
  ]>{
  let genSpecializedAttr = 0;
  let cppNamespace = "::astl";
}
def Ax_Layout : I32EnumAttr<"Layout",
  "layout of the tensor",[
    I32EnumAttrCase<"NCHW", 0>,
    I32EnumAttrCase<"NHWC", 1>,
    I32EnumAttrCase<"Matrix", 2>,
    I32EnumAttrCase<"Vector", 3>,
    I32EnumAttrCase<"Scalar", 4>,
    I32EnumAttrCase<"C128", 5>,
  ]>{
  let genSpecializedAttr = 0;
  let cppNamespace = "::astl";
}
def Ax_DataType : I32EnumAttr<"DataType",
  "data type of the tensor",[
    I32EnumAttrCase<"Float", 0>,
    I32EnumAttrCase<"Double", 1>,
    I32EnumAttrCase<"Int8", 2>,
    I32EnumAttrCase<"Int16", 3>,
    I32EnumAttrCase<"Int32", 4>,
    I32EnumAttrCase<"Int64", 5>,
    I32EnumAttrCase<"UInt8", 6>,
    I32EnumAttrCase<"UInt16", 7>,
    I32EnumAttrCase<"UInt32", 8>,
    I32EnumAttrCase<"UInt64", 9>,
    I32EnumAttrCase<"Bool", 10>,
    I32EnumAttrCase<"String", 11>,
    I32EnumAttrCase<"Complex64", 12>,
    I32EnumAttrCase<"Complex128", 13>
  ]>{
  let genSpecializedAttr = 0;
  let cppNamespace = "::astl";
}

#endif
